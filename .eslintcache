[{"F:\\OWNERS\\Program\\my-first-react-app\\src\\index.js":"1"},{"size":20872,"mtime":1612253266140,"results":"2","hashOfConfig":"3"},{"filePath":"4","messages":"5","errorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"6"},"f48uyt","F:\\OWNERS\\Program\\my-first-react-app\\src\\index.js",["7","8","9","10","11","12","13","14","15","16","17","18","19","20","21","22"],"import './index.css'\r\nimport React from 'react'\r\nimport ReactDOM from 'react-dom'\r\n\r\n\r\nconst $root = document.getElementById('root')\r\n// const name = 'Josh Perez'\r\n// const el = <h1>Hello, {name}, age: { 10 + 8 }</h1>\r\n\r\n// function formatName(user) {\r\n//   return user.firstName + ' ' + user.lastName\r\n// }\r\n// const user = {\r\n//   firstName: 'Harper',\r\n//   lastName: 'Perez',\r\n//   avatarUrl: 'www.baidu.com'\r\n// }\r\n\r\n// const element = (\r\n//     <h6>\r\n//         {el}\r\n//         <span title={user.avatarUrl}>{formatName(user)}</span>\r\n//     </h6>\r\n// )\r\n\r\n// const element_c = React.createElement(\r\n//     'h6',\r\n//     { className: 'color-red' },\r\n//     'Hello World!'\r\n// )\r\n\r\n// ReactDOM.render(\r\n//   element_c,\r\n//   document.getElementById('root')\r\n// )\r\n\r\n// update root view, but actually, it only update the needed parts\r\n// function tick() {\r\n//     const el = (\r\n//         <div>\r\n//             <h6>It is { new Date().toTimeString() }</h6>\r\n//         </div>\r\n//     )\r\n//     ReactDOM.render(el, $root)\r\n// }\r\n\r\n// setInterval(tick, 1000)\r\n\r\n// 函数组件\r\nfunction WelcomeFunction(props) {\r\n  return <h1>Hello, {props.name}</h1>\r\n}\r\n\r\n// class组件\r\nclass WelcomeClass extends React.Component {\r\n  render() {\r\n    return <h1>Welcome_01 Hello, {this.props.name}</h1>\r\n  }\r\n}\r\n\r\nconst el = <WelcomeFunction name=\"Sara\" /> // 入参 {name: 'Sara'}作为props return解析后的模板\r\n// ReactDOM.render(\r\n//     el,\r\n//     $root\r\n// )\r\n\r\nconst el_01 = <WelcomeClass name=\"Sara\" />\r\n// ReactDOM.render(\r\n//     el_01,\r\n//     $root\r\n// )\r\n\r\nfunction App() {\r\n    return (\r\n        <div>\r\n            <WelcomeFunction name=\"Sara\" />\r\n            <WelcomeFunction name=\"Cahal\" />\r\n            <WelcomeFunction name=\"Edite\" />\r\n        </div>\r\n    )\r\n}\r\n\r\n// ReactDOM.render(\r\n//     <App />,\r\n//     $root\r\n// )\r\n\r\n// 拆分组件 start --------------------------\r\nfunction formatDate(date) {\r\n    return date.toTimeString()\r\n}\r\n\r\nfunction Comment(props) {\r\n  return (\r\n    <div className=\"Comment\">\r\n      <UserInfo user={props.author} />\r\n      <div className=\"Comment-text\">\r\n        {props.text}\r\n      </div>\r\n      <div className=\"Comment-date\">\r\n        {formatDate(props.date)}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nfunction Avatar(props) {\r\n    return (\r\n        <img className=\"avatar\"\r\n          src={props.user.avatarUrl}\r\n          alt={props.user.name}\r\n        />\r\n    )\r\n}\r\n\r\nfunction UserInfo(props) {\r\n    return (\r\n        <div className=\"UserInfo\">\r\n            <Avatar user={props.user} />\r\n            <div className=\"UserInfo-name\">\r\n            {props.user.name}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n// 这个props可以通过一个变量传进去?\r\nconst userObj = {\r\n    author: {\r\n        name: 'zhangsan',\r\n        avatarUrl: 'data:image/svg+xmlbase64,PHN2ZyB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciIHZpZXdCb3g9Ii0xMS41IC0xMC4yMzE3NCAyMyAyMC40NjM0OCI+CiAgPHRpdGxlPlJlYWN0IExvZ288L3RpdGxlPgogIDxjaXJjbGUgY3g9IjAiIGN5PSIwIiByPSIyLjA1IiBmaWxsPSIjNjFkYWZiIi8+CiAgPGcgc3Ryb2tlPSIjNjFkYWZiIiBzdHJva2Utd2lkdGg9IjEiIGZpbGw9Im5vbmUiPgogICAgPGVsbGlwc2Ugcng9IjExIiByeT0iNC4yIi8+CiAgICA8ZWxsaXBzZSByeD0iMTEiIHJ5PSI0LjIiIHRyYW5zZm9ybT0icm90YXRlKDYwKSIvPgogICAgPGVsbGlwc2Ugcng9IjExIiByeT0iNC4yIiB0cmFuc2Zvcm09InJvdGF0ZSgxMjApIi8+CiAgPC9nPgo8L3N2Zz4K'\r\n    },\r\n    text: 'i am a student',\r\n    date: new Date()\r\n}\r\n\r\n// 这tm得写多少个属性\r\n// ReactDOM.render(\r\n//     <Comment author={userObj.author} text={userObj.text} date={userObj.date} />,\r\n//     $root\r\n// )\r\n// 拆分组件 end\r\n\r\n// State & LifeCycle -----------------------------\r\nfunction FormattedDate(props) {\r\n  return <h2>date: {props.date.toLocaleTimeString()}.</h2>\r\n}\r\nclass Clock extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    // 有状态\r\n    this.state = {\r\n        date: new Date(),\r\n        comments: []\r\n    }\r\n  }\r\n  // mounted\r\n  componentDidMount() {\r\n    this.timerID = setInterval(\r\n      () => this.tick(),\r\n      1000\r\n    )\r\n    this.fetchComments().then(res => {\r\n        this.setState({\r\n            comments: res\r\n        })\r\n    })\r\n  }\r\n  // destroy\r\n  componentWillUnmount() {\r\n    clearInterval(this.timerID)\r\n  }\r\n  // define private methods\r\n  tick() {\r\n      /**\r\n       * setState\r\n       * 不能直接修改State\r\n       * State更新可以是异步\r\n       * State更新会被合并? 浅合并 wtf?\r\n       */\r\n    this.setState({\r\n      date: new Date()\r\n    })\r\n  }\r\n\r\n  fetchComments() {\r\n      return new Promise((resolve) => {\r\n          setTimeout(() => {\r\n              resolve(['comment1'])\r\n          }, 1100)\r\n      })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h1>Hello, world!</h1>\r\n        <FormattedDate date={ this.state.date } />\r\n        <h2>comments: { this.state.comments.toString() }.</h2>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\n// ReactDOM.render(\r\n//     // 调用Clock构造函数，初始化this.state，调用setState()更新date\r\n//     // React检测到state变更，重新调用render() 从而更新UI\r\n//     <Clock />,\r\n//     $root\r\n// )\r\n\r\n// Event Banding\r\nclass Toggle extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            isToggleOn: true\r\n        }\r\n        // question: wtf?\r\n        // this.handleClick = this.handleClick.bind(this)\r\n    }\r\n    // class fields语法： 变量 箭头函数 this指向Toggle实例\r\n    handleArrowClick = () => {\r\n        this.setState(state => {\r\n            // question: 必须要全量返回state?\r\n            return {\r\n                isToggleOn: !state.isToggleOn\r\n            }\r\n        })\r\n    }\r\n    // 普通函数\r\n    handleClick(str) {\r\n        console.log(str)\r\n        this.setState(state => {\r\n            // question: 必须要全量返回state?\r\n            return {\r\n                isToggleOn: !state.isToggleOn\r\n            }\r\n        })\r\n    }\r\n\r\n    render() {\r\n        // return (\r\n        //     // qa: 箭头函数调用普通函数的副作用：若把普通函数当props传给子组件，可能会导致子组件进行额外的重新渲染（其他情况可用）\r\n        //     <button onClick={() => this.handleClick()}>\r\n        //         {this.state.isToggleOn ? 'ON' : 'OFF'}\r\n        //     </button>\r\n        // )\r\n\r\n        // return (\r\n        //     // qa: 普通函数调用，则必须是class fields\r\n        //     <button onClick={this.handleArrowClick}>\r\n        //         {this.state.isToggleOn ? 'ON' : 'OFF'}\r\n        //     </button>\r\n        // )\r\n\r\n        return (\r\n            // TypeError： handleClick中this的值是undefined\r\n            // <button onClick={this.handleClick}>\r\n            // bind() 修改this指向作用域\r\n            <button onClick={this.handleClick.bind(this, '我是参数')}>\r\n                {this.state.isToggleOn ? 'ON' : 'OFF'}\r\n            </button>\r\n        )\r\n    }\r\n}\r\n\r\n// ReactDOM.render(\r\n//     <Toggle />,\r\n//     $root\r\n// )\r\n\r\n/**\r\n * Conditional Rendering\r\n * render()中写条件语句\r\n * if && condition ? true : false\r\n * 组件函数中return null - 阻止渲染组件 / render中return null - 正常渲染组件\r\n */\r\n\r\n// 8 列表 & Key(供React使用)\r\nfunction NumberList(props) {\r\n    const numbers = props.numbers\r\n    const domList = numbers.map(num => <li key={num.toString()}>{num}</li>)\r\n    return (\r\n        <ul className=\"number-ul\">\r\n            {domList}\r\n        </ul>\r\n    )\r\n}\r\n\r\nfunction ListItem(props) {\r\n  return (\r\n    <li>{props.value}</li>\r\n  )\r\n}\r\n\r\n// 简单的template是可以的，复杂度提升，还是得抽成component\r\nfunction NumberListByMap(props) {\r\n  const numbers = props.numbers\r\n  return (\r\n    <ul>\r\n      {numbers.map((number) =>\r\n        <ListItem key={number.toString()}\r\n                  value={number} />\r\n      )}\r\n    </ul>\r\n  )\r\n}\r\n\r\nconst numbers = [1, 2, 3, 4]\r\n// ReactDOM.render(\r\n//     <NumberList numbers={numbers} />,\r\n//     $root\r\n// )\r\n// ReactDOM.render(\r\n//     <NumberListByMap numbers={numbers} />,\r\n//     $root\r\n// )\r\n\r\n// 9 Form ------------------------------\r\nclass UserForm extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    // mutable state 使React的state成为'唯一数据源'\r\n    this.state = {\r\n      name: '',\r\n      textarea: 'this is textarea',\r\n      select: 'lime'\r\n    }\r\n  }\r\n  // 实际肯定不能这样玩 （得有成熟的解决方案 FORMIK)\r\n  handleChange(key, event) {\r\n    const value = event.target.value\r\n    this.setState(() => {\r\n      // updater 的返回值会与 state 进行浅合并 https://zh-hans.reactjs.org/docs/react-component.html#setstate\r\n      return {\r\n        [key]: value\r\n      }\r\n    })\r\n  }\r\n\r\n  handleSubmit(ev) {\r\n    console.log(this.state)\r\n    ev.preventDefault() // wtf,有修饰符吗?\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <form onSubmit={ this.handleSubmit.bind(this) }>\r\n        <p>\r\n          <label>Name：\r\n            <input type=\"text\" value={this.state.name} onChange={this.handleChange.bind(this, 'name')} />\r\n          </label>\r\n        </p>\r\n        <p>\r\n          <label>Textarea：\r\n            <textarea value={this.state.textarea} onChange={this.handleChange.bind(this, 'textarea')}></textarea>\r\n          </label>\r\n        </p>\r\n        <p>\r\n          <label>Select：\r\n            <select value={this.state.select} onChange={this.handleChange.bind(this, 'select')}>\r\n              <option value=\"grapefruit\">葡萄柚</option>\r\n              <option value=\"lime\">酸橙</option>\r\n              <option value=\"coconut\">椰子</option>\r\n              <option value=\"mango\">芒果</option>\r\n            </select>\r\n          </label>\r\n        </p>\r\n        <p>\r\n          <input type=\"submit\" value=\"Submit\" />\r\n        </p>\r\n      </form>\r\n    )\r\n  }\r\n}\r\n\r\n// ReactDOM.render(\r\n//   <UserForm />,\r\n//   $root\r\n// )\r\n\r\n// 10 状态提升 - 多个组件中需要共享的 state 向上移动到它们的最近共同父组件中，便可实现共享 state ---------------------------\r\n\r\nfunction BoilingVerdict(props) {\r\n  return  <p>{props.celsius >= 100 ? 'water boil' : 'water would not boil'}</p>\r\n}\r\n\r\nconst scaleNames = {\r\n  c: 'Celsius',\r\n  f: 'Fahrenheit'\r\n}\r\nclass TemperatureInputSelf extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      temperature: ''\r\n    }\r\n    this.handleChange = this.handleChange.bind(this)\r\n  }\r\n\r\n  handleChange(ev) {\r\n    this.setState({ temperature: ev.target.value })\r\n  }\r\n\r\n  render() {\r\n    const { temperature } = this.state\r\n    const { scale } = this.props\r\n    return (\r\n      <fieldset>\r\n        <legend>Enter temperature in {scaleNames[scale]}:</legend>\r\n        <input\r\n          value={temperature}\r\n          onChange={this.handleChange} />\r\n          {/* 子组件自动更新 */}\r\n        <BoilingVerdict\r\n          celsius={parseFloat(temperature)} />\r\n      </fieldset>\r\n    )\r\n  }\r\n}\r\nclass TemperatureInputShare extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      temperature: ''\r\n    }\r\n    this.handleChange = this.handleChange.bind(this)\r\n  }\r\n  handleChange(ev) {\r\n    // setState 只能更新 state\r\n    // this.setState({ temperature: ev.target.value })\r\n    // props 包括 onTemperatureChange\r\n    this.props.onTemperatureChange(ev.target.value)\r\n  }\r\n\r\n  render() {\r\n    // const { temperature } = this.state\r\n    const { scale, temperature } = this.props\r\n    return (\r\n      <fieldset>\r\n        <legend>Enter temperature in {scaleNames[scale]}:</legend>\r\n        <input\r\n          value={temperature}\r\n          onChange={this.handleChange} />\r\n          {/* 子组件自动更新 */}\r\n        <BoilingVerdict\r\n          celsius={parseFloat(temperature)} />\r\n      </fieldset>\r\n    )\r\n  }\r\n}\r\n\r\n// utils\r\nfunction toCelsius(fahrenheit) {\r\n  return (fahrenheit - 32) * 5 / 9;\r\n}\r\n\r\nfunction toFahrenheit(celsius) {\r\n  return (celsius * 9 / 5) + 32;\r\n}\r\n\r\nfunction tryConvert(temperature, convert) {\r\n  const input = parseFloat(temperature);\r\n  if (Number.isNaN(input)) {\r\n    return '';\r\n  }\r\n  const output = convert(input);\r\n  const rounded = Math.round(output * 1000) / 1000;\r\n  return rounded.toString();\r\n}\r\n\r\nclass Calculator extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      temperature: 101,\r\n      scale: 'c'\r\n    }\r\n    this.handleCelsiusChange = this.handleCelsiusChange.bind(this)\r\n    this.handleFahrenheitChange = this.handleFahrenheitChange.bind(this)\r\n  }\r\n\r\n  handleCelsiusChange(temperature) {\r\n    this.setState({scale: 'c', temperature})\r\n  }\r\n\r\n  handleFahrenheitChange(temperature) {\r\n    this.setState({scale: 'f', temperature})\r\n  }\r\n\r\n  render() {\r\n    // mutable state, WTF?\r\n    const { scale, temperature } = this.state\r\n    // 对值进行单位转换\r\n    const celsius = scale === 'c' ? temperature : tryConvert(temperature, toFahrenheit)\r\n    const fahrenheit = scale === 'f' ? temperature : tryConvert(temperature, toCelsius)\r\n    return (\r\n      // <div>\r\n      //   <TemperatureInput scale='c' />\r\n      //   <TemperatureInput scale='f' />\r\n      // </div>\r\n      <div>\r\n        <TemperatureInputShare scale='c' temperature={celsius} onTemperatureChange={this.handleCelsiusChange}  />\r\n        <TemperatureInputShare scale='f' temperature={fahrenheit} onTemperatureChange={this.handleFahrenheitChange}  />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\n// ReactDOM.render(\r\n//   <Calculator />,\r\n//   $root\r\n// )\r\n\r\n\r\n//  11. 组合 & 继承 ------------------------------\r\n// \\children\\ 特殊的prop 类比v-slot=’slotName‘\r\nfunction FancyBorder(props) {\r\n  return (\r\n    <div className=\"container\">\r\n      <p>我是FancyBorder函数组件</p>\r\n      <div className={'FancyBorder FancyBorder-' + props.color}>\r\n        <p>下面是插入的 children prop的slot组件：</p>\r\n        {props.children}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nfunction WelcomeDialog() {\r\n  return (\r\n    <FancyBorder color=\"blue\">\r\n      <h1 className=\"Dialog-title\">\r\n        Welcome\r\n      </h1>\r\n      <p className=\"Dialog-message\">\r\n        Thank you for visiting our spacecraft!\r\n      </p>\r\n    </FancyBorder>\r\n  )\r\n}\r\n\r\n// 类比具名插槽 指定prop的slotName\r\n// 放在内容里面，插入后会用一个div包裹起来\r\nfunction SplitPane(props) {\r\n  return (\r\n    <div className=\"SplitPane\">\r\n      <div className=\"SplitPane-left\">\r\n        {props.left}\r\n      </div>\r\n      <div className=\"SplitPane-right\">\r\n        {props.right}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction Contacts() {\r\n  return (\r\n    <p>i am Contacts</p>\r\n  )\r\n}\r\n\r\nfunction Chat() {\r\n  return (\r\n    <p>i am Chat</p>\r\n  )\r\n}\r\n// 放在组件的属性上 作为props插入一个子组件\r\nfunction MainPane() {\r\n  return (\r\n    <SplitPane \r\n      left = {\r\n        <Contacts />\r\n      }\r\n      right = {\r\n        <Chat />\r\n      }\r\n    >\r\n    </SplitPane>\r\n  )\r\n}\r\n\r\n// ReactDOM.render(\r\n//   <WelcomeDialog />,\r\n//   $root\r\n// )\r\n\r\n// ReactDOM.render(\r\n//   <MainPane />,\r\n//   $root\r\n// )\r\n\r\nfunction Dialog(props) {\r\n  return (\r\n    <FancyBorder color=\"blue\">\r\n      <h1 className=\"Dialog-title\">\r\n        {props.title}\r\n      </h1>\r\n      <p className=\"Dialog-message\">\r\n        {props.message}\r\n      </p>\r\n      {props.children}\r\n    </FancyBorder>\r\n  );\r\n}\r\n// 适用class，插入内容的state还是在定义的父组件中维护\r\n// 灵活得有点可怕，这层层嵌套之后\r\nclass SignUpDialog extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleSignUp = this.handleSignUp.bind(this);\r\n    this.state = {login: ''};\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Dialog title=\"Mars Exploration Program\"\r\n              message=\"How should we refer to you?\">\r\n        <input value={this.state.login}\r\n               onChange={this.handleChange} />\r\n        <button onClick={this.handleSignUp}>\r\n          Sign Me Up!\r\n        </button>\r\n      </Dialog>\r\n    );\r\n  }\r\n\r\n  handleChange(e) {\r\n    this.setState({login: e.target.value});\r\n  }\r\n\r\n  handleSignUp() {\r\n    console.log(`Welcome aboard, ${this.state.login}!`);\r\n  }\r\n}\r\n\r\n// ReactDOM.render(\r\n//   <SignUpDialog />,\r\n//   $root\r\n// )\r\n\r\n// 12. 完整的demo，组件拆分哲学 ---------------------\r\n\r\nclass FilterableProductTable extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    // wtf: 所有数据都该在state一个容器里? 每次都解构?\r\n    this.state = {\r\n      name: '',\r\n      stocked: false,\r\n      sportingGoods: [],\r\n      electronicsGoods: []\r\n    }\r\n    this.handleQuerySearch = this.handleQuerySearch.bind(this)\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.handleQuerySearch()\r\n  }\r\n\r\n  handleQuerySearch(key, value) {\r\n    this.setState({ [key]: value })\r\n    this.APIGetTableData()\r\n      .then(res => {\r\n        const { sportingGoods = [], electronicsGoods = [] } = this.filterTableData(res)\r\n        this.setState({\r\n          sportingGoods,\r\n          electronicsGoods\r\n        })\r\n      })\r\n  }\r\n\r\n  filterTableData(res) {\r\n    let { sportingGoods = [], electronicsGoods = [] } = res\r\n    sportingGoods = sportingGoods.filter(good => (this.state.stocked ? good.stocked : true) && (good.name.indexOf(this.state.name) !== -1))\r\n    electronicsGoods = electronicsGoods.filter(good => (this.state.stocked ? good.stocked : true) && (good.name.indexOf(this.state.name) !== -1))\r\n    return {\r\n      sportingGoods,\r\n      electronicsGoods\r\n    }\r\n  }\r\n\r\n  APIGetTableData() {\r\n    return new Promise(resolve => {\r\n      setTimeout(() => {\r\n        resolve({\r\n          sportingGoods: [\r\n            {category: \"Sporting Goods\", price: \"$49.99\", stocked: true, name: \"Football\"},\r\n            {category: \"Sporting Goods\", price: \"$9.99\", stocked: true, name: \"Baseball\"},\r\n            {category: \"Sporting Goods\", price: \"$29.99\", stocked: false, name: \"Basketball\"}\r\n          ],\r\n          electronicsGoods: [\r\n            {category: \"Electronics\", price: \"$99.99\", stocked: true, name: \"iPod Touch\"},\r\n            {category: \"Electronics\", price: \"$399.99\", stocked: false, name: \"iPhone 5\"},\r\n            {category: \"Electronics\", price: \"$199.99\", stocked: true, name: \"Nexus 7\"}\r\n          ]\r\n        })\r\n      }, 300)\r\n    })\r\n  }\r\n\r\n  render() {\r\n    const { name, sportingGoods, electronicsGoods } = this.state\r\n    return (\r\n      <div class=\"product-container\">\r\n        <SearchBar name={name} onTemperatureChange={this.handleQuerySearch} />\r\n        <p>{name}</p>\r\n        <ProductTable sportingGoods={sportingGoods} electronicsGoods={electronicsGoods} />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nclass SearchBar extends React.Component {\r\n  handleChange(key, ev) {\r\n    console.log(ev)\r\n    console.log(key)\r\n    const value = key === 'name' ? ev.target.value : ev.target.checked\r\n    this.props.onTemperatureChange(key, value)\r\n  }\r\n\r\n  render() {\r\n    const { name, stocked } = this.props\r\n    return (\r\n      <div class=\"search-bar\">\r\n        <div class=\"item-content\">\r\n          <input type=\"text\" value={name} onChange={this.handleChange.bind(this, 'name')}></input>\r\n        </div>\r\n        <div class=\"item-content\">\r\n          <input type=\"checkbox\" value={stocked} onChange={this.handleChange.bind(this, 'stocked')}></input>\r\n          Only show products in stocked\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nclass ProductTable extends React.Component {\r\n  render() {\r\n    const { sportingGoods, electronicsGoods } = this.props\r\n    return (\r\n      <div class=\"product-table\">\r\n        <div class=\"sporting-table\">\r\n          <ProductCategoryRow sportingGoods={sportingGoods} />\r\n        </div>\r\n        <div class=\"elect-table\">\r\n          <ProductRow electronicsGoods={electronicsGoods} />\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nclass ProductCategoryRow extends React.Component {\r\n  render() {\r\n    const { sportingGoods = [] } = this.props\r\n    const list = sportingGoods.map(good => (\r\n      <tr key={good.name}>\r\n        <td>{good.name}</td>\r\n        <td>{good.price}</td>\r\n      </tr>\r\n    ))\r\n    return (\r\n      <table>\r\n        <thead>\r\n          <tr>\r\n            <th>Name</th>\r\n            <th>Price</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          { list }\r\n        </tbody>\r\n      </table>\r\n    )\r\n  }\r\n}\r\n\r\nclass ProductRow extends React.Component {\r\n  // constructor(props) {\r\n  //   super(props)\r\n  // }\r\n\r\n  render() {\r\n    const { electronicsGoods = [] } = this.props\r\n    const list = electronicsGoods.map(good => (\r\n      <tr key={good.name}>\r\n        <td>{good.name}</td>\r\n        <td>{good.price}</td>\r\n      </tr>\r\n    ))\r\n    return (\r\n      <table>\r\n        <thead>\r\n          <tr>\r\n            <th>Name</th>\r\n            <th>Price</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          { list }\r\n        </tbody>\r\n      </table>\r\n    )\r\n  }\r\n}\r\n\r\nReactDOM.render(\r\n  <FilterableProductTable />,\r\n  $root\r\n)\r\n",{"ruleId":"23","severity":1,"message":"24","line":61,"column":7,"nodeType":"25","messageId":"26","endLine":61,"endColumn":9},{"ruleId":"23","severity":1,"message":"27","line":67,"column":7,"nodeType":"25","messageId":"26","endLine":67,"endColumn":12},{"ruleId":"23","severity":1,"message":"28","line":73,"column":10,"nodeType":"25","messageId":"26","endLine":73,"endColumn":13},{"ruleId":"23","severity":1,"message":"29","line":93,"column":10,"nodeType":"25","messageId":"26","endLine":93,"endColumn":17},{"ruleId":"23","severity":1,"message":"30","line":128,"column":7,"nodeType":"25","messageId":"26","endLine":128,"endColumn":14},{"ruleId":"23","severity":1,"message":"31","line":148,"column":7,"nodeType":"25","messageId":"26","endLine":148,"endColumn":12},{"ruleId":"23","severity":1,"message":"32","line":213,"column":7,"nodeType":"25","messageId":"26","endLine":213,"endColumn":13},{"ruleId":"23","severity":1,"message":"33","line":281,"column":10,"nodeType":"25","messageId":"26","endLine":281,"endColumn":20},{"ruleId":"23","severity":1,"message":"34","line":298,"column":10,"nodeType":"25","messageId":"26","endLine":298,"endColumn":25},{"ruleId":"23","severity":1,"message":"35","line":310,"column":7,"nodeType":"25","messageId":"26","endLine":310,"endColumn":14},{"ruleId":"23","severity":1,"message":"36","line":321,"column":7,"nodeType":"25","messageId":"26","endLine":321,"endColumn":15},{"ruleId":"23","severity":1,"message":"37","line":393,"column":7,"nodeType":"25","messageId":"26","endLine":393,"endColumn":27},{"ruleId":"23","severity":1,"message":"38","line":473,"column":7,"nodeType":"25","messageId":"26","endLine":473,"endColumn":17},{"ruleId":"23","severity":1,"message":"39","line":531,"column":10,"nodeType":"25","messageId":"26","endLine":531,"endColumn":23},{"ruleId":"23","severity":1,"message":"40","line":571,"column":10,"nodeType":"25","messageId":"26","endLine":571,"endColumn":18},{"ruleId":"23","severity":1,"message":"41","line":610,"column":7,"nodeType":"25","messageId":"26","endLine":610,"endColumn":19},"no-unused-vars","'el' is assigned a value but never used.","Identifier","unusedVar","'el_01' is assigned a value but never used.","'App' is defined but never used.","'Comment' is defined but never used.","'userObj' is assigned a value but never used.","'Clock' is defined but never used.","'Toggle' is defined but never used.","'NumberList' is defined but never used.","'NumberListByMap' is defined but never used.","'numbers' is assigned a value but never used.","'UserForm' is defined but never used.","'TemperatureInputSelf' is defined but never used.","'Calculator' is defined but never used.","'WelcomeDialog' is defined but never used.","'MainPane' is defined but never used.","'SignUpDialog' is defined but never used."]